/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdlib.h>
#include <android/log.h>
#include "faceBuffing.h"
#include "mtprocessor.h"
#include "jlalgorithm.h"
#include "operation.h"
#include "DeHaze.h"
#include "layer.h"
#include "yuv420sp2rgb.h"
#include "Progressive.h"
#include "gifProcess.h"
#include "ColorViberation.h"
#include "MSRCR.h"
#include "beeps.h"
#include "Shadow.h"
#include "ShadowHighLight.h"
/* Header for class cn_jingling_lib_filters_CMTProcessor */

#ifndef _Included_cn_jingling_lib_filters_CMTProcessor
#define _Included_cn_jingling_lib_filters_CMTProcessor
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_HalfTone
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jintArray tsrcPixArray, jint tw, jint th, jint flag);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_shadowAndHighlight
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint lowV, jint highV);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_beepsDetailRecover
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray dstPixArray);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_beepsSetupAll
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_beepsOverlay
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray dstPixArray);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_BEEPSVerticalHorizontal
 (JNIEnv *env, jclass obj, jdoubleArray data, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_BEEPSHorizontalVertical
 (JNIEnv *env, jclass obj, jdoubleArray data, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ViberationInitial
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ViberationControl
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jfloat degree);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ViberationRelease
 (JNIEnv *env, jclass obj);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_gifProcess
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jintArray p, jint mouthCondition, jint browCondition, jint eyeCondition);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_equlizeHist
(JNIEnv *, jclass, jintArray, jint, jint);


//night
//JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_NightImageInput
// (JNIEnv *env, jclass obj, jintArray src, jintArray dst,  jint w,  jint h, jint img_total, jint img_id);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_NightGenerateYUV
(JNIEnv *env, jclass obj, jobjectArray  srcImages, jintArray dst,
		jint w_src,  jint h_src, jint w_dst,  jint h_dst, jint img_total);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_NightGenerate
(JNIEnv *env, jclass obj, jobjectArray srcImages, jintArray dst,  jint w,  jint h, jint img_total);


JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_autoContrast
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jfloat thre_low, jfloat thre_high);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ShadowHighLight
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ShadowHighLight1
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ShadowHighLight2
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_Decolorization
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_HDRsimple
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint block_num, jint edg_thre);
//////////////////////////////////////////////////cheng paper_artist /////////////////////////////////////////////////////////////
JNIEXPORT int JNICALL Java_cn_jingling_lib_filters_CMTProcessor_lipstick
 (JNIEnv *env, jclass obj, jintArray Pixels, jintArray color, jint w, jint h, jintArray p);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_Kirsch
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint kind);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters__CMTProcessor_Posterize
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint levels);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_WaterColor
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray srcPixArray1, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_Pencil
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray srcPixArray1,jintArray srcPixArray2, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_ColorPencil
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray srcPixArray1,jintArray srcPixArray2, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_BlueEdg
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray srcPixArray1,jintArray srcPixArray2, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_OilPainting
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray srcPixArray1,jintArray srcPixArray2, jint w, jint h);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_CLAHERGB3
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint block_num, jint edg_thre);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_LocaEnhanceRGB
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint block_num, jint edg_thre);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_whiteBalance
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_MSRCR
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);


JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_HDR
 (JNIEnv *env, jclass obj, jintArray dark, jintArray bright, jintArray dst, jint w, jint h);
JNIEXPORT jint JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_ColorTemperature
 (JNIEnv *env, jclass obj, jintArray img, jintArray dst,  jint size, jint temperature);


JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_InitializeCircle
(JNIEnv *env, jclass obj, jint eyex1, jint eyey1, jint eyeradius1, jint eyex2, jint eyey2, jint eyeradius2, jintArray srcPixArray, jint w, jint h, jint ratio);
//JNIEXPORT jint JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_LightenDemo
//(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint sAxis, jint lAxis, jint centerX, jint centerY);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_usmProcess
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint radius, jint thres, jint amount);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_whiten
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint ratio, jint sAxis, jint lAxis, jint centerX, jint centerY);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_backLight
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint leftX, jint leftY, jint rightX, jint rightY, jint sAmount, jint lAmount, jintArray darkerTable, jintArray lighterTable);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_sceneProcess
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_sceneEnhance
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint para1, jint para2, jintArray LAB);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_Bilateral
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint delta, jint radius, jint sigma);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_BrightEyes
(JNIEnv *env, jclass obj, jintArray srcPixArray,jint w, jint h,jint ratio, jint leftX,jint leftY,jint rightX,jint rightY);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_buffingTemplate
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint bb, jint flag);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_faceBuffing
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jintArray R_Table, jintArray G_Table, jintArray B_Table);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_faceBuffingBackup
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jintArray R_Table, jintArray G_Table, jintArray B_Table);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_deHaze
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint level, jfloat Rat, jfloat RatE, jfloat RatL);


JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_faceBuffingWeight
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jintArray R_Table, jintArray G_Table, jintArray B_Table, jint weight);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_releaseSource
(JNIEnv *env, jclass obj, jintArray srcPixArray);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_produceArea
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray baseflag, jint w, jint h, jintArray modifyColor);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_normalization
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_autoContrast2
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_autoColor
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    brightEffect
 * Signature: ([IIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_brightEffect
(JNIEnv *, jclass, jintArray, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    contrastEffect
 * Signature: ([IIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_contrastEffect
(JNIEnv *, jclass, jintArray, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    eyeEnlarge
 * Signature: ([IIIIIIF)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_eyeEnlarge
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jfloat);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_eyeEnlargeWithTags
(JNIEnv *env, jclass obj, jintArray inp, jintArray outp, jint w, jint h,jintArray xp, jintArray yp, jintArray rp, jfloatArray scalep, jint num);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_eyeBrighten
(JNIEnv *, jclass, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    curveEffect
 * Signature: ([I[I[I[I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_curveEffect
(JNIEnv *, jclass, jintArray, jintArray, jintArray, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    blueEffect
 * Signature: ([I[I[I[I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_blueEffect
(JNIEnv *, jclass, jintArray, jintArray, jintArray, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    screenEffect
 * Signature: ([I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_screenEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    screenEffect
 * Signature: ([I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_alphaCompositeEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    overlayEffect
 * Signature: ([I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_overlayEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_overlayAlphaEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsOverlayAlphaEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsCoverageEffect
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerArray, jint w, jint h, jint pw, jint ph);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsMultiplyAlphaEffect
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerArray, jint w, jint h, jint pw, jint ph, jint alpha);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_multiplyAlphaEffect
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerArray, jint w, jint h, jint alpha);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    multiplyEffect
 * Signature: ([I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_multiplyEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    multiplyEffect
 * Signature: ([I[III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsMultiplyEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsOverlayEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsLinearBurn
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    gray
 * Signature: ([III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_gray
(JNIEnv *, jclass, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    blur
 * Signature: ([IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_blur
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    dlomo
 * Signature: ([IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_dlomo
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_lomo
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    llomo
 * Signature: ([IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_llomo
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    smoothEffect
 * Signature: ([III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_smoothEffect
(JNIEnv *, jclass, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    singleColorEffect
 * Signature: ([III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_singleColorEffect
(JNIEnv *, jclass, jintArray, jint, jint,jfloatArray,jfloat,jfloat,jfloat,jfloat,jfloat);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    skinWhitePointEffect
 * Signature: ([I[IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_skinWhitePointEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    skinSmoothPointEffect
 * Signature: ([IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_skinSmoothPointEffect
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    thinEffect
 * Signature: ([IIIIIIIIF)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_thinEffect
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jint, jint, jfloat, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_thinEffectAuto
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_thinEffectWholeFace
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jint, jfloat);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_smileWholeMouth
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint, jint, jfloat);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    gaussBlur
 * Signature: ([IIIIF)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_gaussBlur
(JNIEnv *, jclass, jintArray, jint, jint, jint, jfloat);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    dreamy
 * Signature: ([IIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_dreamy
(JNIEnv *, jclass, jintArray, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    autoLevels
 * Signature: ([III)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_autoLevels
(JNIEnv *, jclass, jintArray, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    redeyeEffect
 * Signature: ([IIIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_redeyeEffect
(JNIEnv *, jclass, jintArray, jint, jint, jint, jint, jint);

/*
 * Class:     cn_jingling_lib_filters_CMTProcessor
 * Method:    getDynamicFrame
 * Signature: ([I[IIIII)V
 */
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_getDynamicFrame
(JNIEnv *, jclass, jintArray, jintArray, jint, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_setVisibleArea
(JNIEnv *, jclass, jintArray, jint, jint, jintArray, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_coverEffect
(JNIEnv *, jclass, jintArray, jintArray, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_sketchEffect
(JNIEnv *, jclass, jintArray, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_popstyle
(JNIEnv *, jclass, jintArray, jint, jint,jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_blurBackgroundEffectByCircle
(JNIEnv *, jclass, jintArray, jint, jint , jint , jint , jint , jint );

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_blurBackgroundEffectByLine
(JNIEnv *, jclass, jintArray, jint, jint , jint , jint , jint , jint , jfloat);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_unsharpEffect
(JNIEnv *, jclass, jintArray, jintArray,jint, jint , jint , jint , jfloat );

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_sharpenEffect
(JNIEnv *, jclass, jintArray, jint, jint , jint );

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_fastAverageBlur
(JNIEnv *, jclass, jintArray, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_increment
(JNIEnv *, jclass, jintArray, jint, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_lineardodgeEffect
(JNIEnv *env, jclass, jintArray, jintArray, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_softlightEffect
(JNIEnv *env, jclass, jintArray, jintArray, jint, jint);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_emissionEffect
(JNIEnv *env, jclass, jintArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_etocEffect
(JNIEnv *env, jclass, jintArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_postivefilterEffect
(JNIEnv *env, jclass, jintArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_colorLevel
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jint min, jfloat gray, jint max, jint outMin, jint outMax);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_colorBurn
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_linearBurn
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h, jint layeralpha);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_darken
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_screenWithLimitedLayer
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h, jint lw, jint lh);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_mergeSelection
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jintArray selArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_mergeWeight
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h, jint weight);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_saturation
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, jfloat svalue);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_fastAverageBlurWithThreshold
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, int radius, int threshold);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_fastAverageBlurWithThresholdAndWeight
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, int radius, int threshold, int weight);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_fastAverageBlurWithThresholdWeightSkinDetection
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h, int radius, int threshold, int weight,
		int hmin, int hmax, int smin, int smax, int vmin, int vmax);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_yuv420sp2rgb
(JNIEnv *env, jclass obj, jbyteArray rgb, jbyteArray yuv420sp, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_yuv2rgbResize(
	JNIEnv* env, jobject object, jbyteArray pinArray, jint inWidth,
	jint inHeight, jbyteArray poutArray, jint outWidth, jint outHeight, jint direction);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_yuv2rgbBitmap(
	JNIEnv* env, jobject object, jbyteArray pinArray, jint inWidth,
	jint inHeight, jintArray pixels);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_transToGray
(JNIEnv *env, jclass obj, jintArray srcPixArray, jbyteArray dstPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_transToReversedBGR
(JNIEnv *env, jclass obj, jintArray srcPixArray, jbyteArray dstPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_progressiveLineInitialize
(JNIEnv *env, jclass obj, jint r, jint w, jint h, jint times, jint channel);

JNIEXPORT jintArray JNICALL Java_cn_jingling_lib_filters_CMTProcessor_progressiveLineProcess(
	JNIEnv *env, jclass obj, jintArray srcPixArray, jint w);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_progressiveRelease
(JNIEnv *env, jclass obj);

//JNIEXPORT jintArray JNICALL Java_cn_jingling_lib_filters_CMTProcessor_usmProcessProgressive
//(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint radius, jint thres, jint amount);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_setupDecolorization
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_decolorization
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jint size);
JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_SmoothSkinProcessor_skinOverLay
 (JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray dstPixArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_rsScreenEffect
(JNIEnv *env, jclass obj, jintArray srcPixArray, jintArray layerPixArray, jint w, jint h, jint lw, jint lh);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_setHopeEffectTexturePixels
 (JNIEnv *env, jclass obj, jintArray texArray, jint w, jint h);

JNIEXPORT void JNICALL Java_cn_jingling_lib_filters_CMTProcessor_HopeEffect
(JNIEnv *env, jclass obj, jintArray srcPixArray, jint w, jint h);

#ifdef __cplusplus
}
#endif
#endif
